import mongoose = require("mongoose");
import Q = require('q');

import updatedStatusPlugin = require("./plugins/updated_status");
import modelInvariantsPluginGenerator = require('./plugins/model_invariants');
import Invariants = require('../lib/invariants');

module TaskGroup
{
    /******************************************
     * Schema
     *****************************************/
    let taskGroupSchema = new mongoose.Schema({
        _name: {
            type: String,
            required: true
        },
        _identifier: {
            // human readable identifier, unlike the (internal) _id generated by mongoose
            type: String,
            index: {
                unique: true
            },
            required: true
        }
    })

    /******************************************
     * Getters/Setters
     *****************************************/
    taskGroupSchema.virtual('name').get(function(): string
    {
        if (this._name === null || this._name === undefined)
        {
            return '';
        }
        return this._name;
    })
    taskGroupSchema.virtual('name').set(function(newValue: string)
    {
        this._name = name;
    })

    taskGroupSchema.virtual('identifier').get(function(): string
    {
        if (this._identifier === null || this._identifier === undefined)
        {
            return this.id;
        }
        return this._identifier;
    })
    taskGroupSchema.virtual('identifier').set(function(newValue: string)
    {
        this._identifier = newValue;
    })

    /******************************************
     * Plugins
     *****************************************/
    taskGroupSchema.plugin(updatedStatusPlugin);
    taskGroupSchema.plugin(modelInvariantsPluginGenerator(invariants))

    /******************************************
     * Model
     *****************************************/
    export var model = mongoose.model('TaskGroup', taskGroupSchema);

    /******************************************
     * Exported Interfaces
     *****************************************/
    export interface Instance extends mongoose.Document
    {
        name: string,
        identifier: string,
    }

    /******************************************
     * Invariants
     *****************************************/
    /**
     * Mongoose does not support model level validation. Do that here.
     */
    function invariants(taskGroup): Q.Promise<Invariants.Invariant>
    {
        return Q.fcall(() =>
        {
            return [
            ].reduce(Invariants.chain, Invariants.Predefined.alwaysTrue);
        })
    }
}

export = TaskGroup;
